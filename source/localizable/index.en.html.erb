---
layout: default
title: JavaScript drag and drop, resizing and gestures with inertia and snapping
description: >
               interact.js is a lightweight, standalone JavaScript module for
               handling single-pointer and multi-touch drags and gestures with
               powerful features including inertia and snapping.

scripts:
    - underscore-min
    - debug
    - livedemo

styles:
    - livedemo

links:
    - ['https://github.com/taye/interact.js', 'View on Github' ,   'github.svg', 'Octocat' ]
    - ['https://twitter.com/interactjs'     , '@interactjs'    ,     'bird.svg', 'Bird'    ]
    - ['https://gitter.im/taye/interact.js' , 'Discuss'        ,     'chat.svg', 'Gitter'  ]
    - :break
    - ['/docs/'                             , 'Documentation'  ,      'doc.svg', 'Docs'    ]
    - ['/docs/faq/'                         , 'FAQ'            ,     'help.svg', '?'       ]
    - :donate_btn

---

<div id="logo-area">
    <%= image_tag 'ijs-anim-short.svg',
        :id => 'ijs-logo',
        :alt => 'interact.js' %>
</div>
<p id="tagline"> JavaScript drag and drop, resizing and multi-touch
gestures with inertia and snapping for modern browsers (and&nbsp;also&nbsp;IE8+) </p>

<div id="download">
    <p class="version-title"> Version <%= data.site.current_version %> </p>
    <div id="get-min">
        Download the <em>minified</em> version
        <br> 18.9KB gzipped
        <br> <a class="link-btn" href="//code.interactjs.io/v<%= data.site.current_version %>/interact.min.js">
            <%= image_tag 'download.svg',
                :class => 'link-btn-icon',
                :alt => 'Download' %>

            interact.min.js
        </a>
    </div>
    <div id="get-dev">
        Download the <em>development</em> version
        <br> 40.8KB gzipped
        <br> <a class="link-btn" href="//code.interactjs.io/v<%= data.site.current_version %>/interact.js">
            <%= image_tag 'download.svg',
                :class => 'link-btn-icon',
                :alt => 'Download' %>

            interact.js
        </a>
    </div>
</div>

<%= if current_page.data.links
  partial :link_btn_list, :locals => { :links => current_page.data.links }
end %>

<script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=interactjsio" id="_carbonads_js"></script>

<div id="demos">
    <h1 id="dragging"> Dragging </h1>
    <div id="basic-drag" class="demo-area">

        <input id="demo-2-html" type="radio" name="demo-2" hidden>
        <label class="html-label" for="demo-2-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div id="drag-1" class="draggable">
  <p> You can drag one element </p>
</div>
<div id="drag-2" class="draggable">
    <p> with each pointer </p>
</div>
<% end %>
        </div>

        <input id="demo-2-css" type="radio" name="demo-2" hidden>
        <label class="css-label" for="demo-2-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#drag-1, #drag-2 {
  width: 25%;
  height: 100%;
  min-height: 6.5em;
  margin: 10%;

  background-color: #29e;
  color: white;

  border-radius: 0.75em;
  padding: 4%;

  -webkit-transform: translate(0px, 0px);
          transform: translate(0px, 0px);
}

#drag-me::before {
  content: "#" attr(id);
  font-weight: bold;
}
<% end %>
        </div>

        <input id="demo-2-js" type="radio" name="demo-2" hidden checked>
        <label class="js-label" for="demo-2-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
// target elements with the "draggable" class
interact('.draggable')
  .draggable({
    // enable inertial throwing
    inertia: true,
    // keep the element within the area of it's parent
    restrict: {
      restriction: "parent",
      endOnly: true,
      elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
    },
    // enable autoScroll
    autoScroll: true,

    // call this function on every dragmove event
    onmove: dragMoveListener,
    // call this function on every dragend event
    onend: function (event) {
      var textEl = event.target.querySelector('p');

      textEl && (textEl.textContent =
        'moved a distance of '
        + (Math.sqrt(event.dx * event.dx +
                     event.dy * event.dy)|0) + 'px');
    }
  });

  function dragMoveListener (event) {
    var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    // translate the element
    target.style.webkitTransform =
    target.style.transform =
      'translate(' + x + 'px, ' + y + 'px)';

    // update the posiion attributes
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
  }

  // this is used later in the resizing and gesture demos
  window.dragMoveListener = dragMoveListener;
<% end %>
        </div>

        <input id="demo-2-demo" type="radio" name="demo-2" hidden>
        <label class="demo-label" for="demo-2-demo"> Demo only </label>
    </div>
    <h1 id="drag-and-drop"> Drag and drop </h1>
    <div id="drag-drop-demo" class="demo-area">

        <input id="demo-5-html" type="radio" name="demo-5" hidden>
        <label class="html-label" for="demo-5-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div id="no-drop" class="draggable drag-drop"> #no-drop </div>

<div id="yes-drop" class="draggable drag-drop"> #yes-drop </div>

<div id="outer-dropzone" class="dropzone">
  #outer-dropzone
  <div id="inner-dropzone" class="dropzone">#inner-dropzone</div>
 </div>
<% end %>
        </div>

        <input id="demo-5-css" type="radio" name="demo-5" hidden>
        <label class="css-label" for="demo-5-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#outer-dropzone {
  height: 140px;
}

#inner-dropzone {
  height: 80px;
}

.dropzone {
  background-color: #ccc;
  border: dashed 4px transparent;
  border-radius: 4px;
  margin: 10px auto 30px;
  padding: 10px;
  width: 80%;
  transition: background-color 0.3s;
}

.drop-active {
  border-color: #aaa;
}

.drop-target {
  background-color: #29e;
  border-color: #fff;
  border-style: solid;
}

.drag-drop {
  display: inline-block;
  min-width: 40px;
  padding: 2em 0.5em;

  color: #fff;
  background-color: #29e;
  border: solid 2px #fff;

  -webkit-transform: translate(0px, 0px);
          transform: translate(0px, 0px);

  transition: background-color 0.3s;
}

.drag-drop.can-drop {
  color: #000;
  background-color: #4e4;
}
<% end %>
        </div>

        <input id="demo-5-js" type="radio" name="demo-5" hidden checked>
        <label class="js-label" for="demo-5-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
/* The dragging code for '.draggable' from the demo above
 * applies to this demo as well so it doesn't have to be repeated. */

// enable draggables to be dropped into this
interact('.dropzone').dropzone({
  // only accept elements matching this CSS selector
  accept: '#yes-drop',
  // Require a 75% element overlap for a drop to be possible
  overlap: 0.75,

  // listen for drop related events:

  ondropactivate: function (event) {
    // add active dropzone feedback
    event.target.classList.add('drop-active');
  },
  ondragenter: function (event) {
    var draggableElement = event.relatedTarget,
        dropzoneElement = event.target;

    // feedback the possibility of a drop
    dropzoneElement.classList.add('drop-target');
    draggableElement.classList.add('can-drop');
    draggableElement.textContent = 'Dragged in';
  },
  ondragleave: function (event) {
    // remove the drop feedback style
    event.target.classList.remove('drop-target');
    event.relatedTarget.classList.remove('can-drop');
    event.relatedTarget.textContent = 'Dragged out';
  },
  ondrop: function (event) {
    event.relatedTarget.textContent = 'Dropped';
  },
  ondropdeactivate: function (event) {
    // remove active dropzone feedback
    event.target.classList.remove('drop-active');
    event.target.classList.remove('drop-target');
  }
});
<% end %>
        </div>

        <input id="demo-5-demo" type="radio" name="demo-5" hidden>
        <label class="demo-label" for="demo-5-demo"> Demo only </label>
    </div>

    <h1> Snapping </h1>

    <div class="demo-area">
        <input id="demo-4-html" type="radio" name="demo-4" hidden>
        <label class="html-label" for="demo-4-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div id="grid-snap">
  Dragging is constrained to the corners of a grid
</div>
<% end %>
        </div>

        <input id="demo-4-css" type="radio" name="demo-4" hidden>
        <label class="css-label" for="demo-4-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#grid-snap {
  width: 40%;
  background-color: #29e;
  color: #fff;
  font-size: 1.2em;
  border-radius: 4px;
  padding: 2%;
  margin: 5%;
}
<% end %>
        </div>

        <input id="demo-4-js" type="radio" name="demo-4" hidden checked>
        <label class="js-label" for="demo-4-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
var element = document.getElementById('grid-snap'),
    x = 0, y = 0;

interact(element)
  .draggable({
    snap: {
      targets: [
        interact.createSnapGrid({ x: 30, y: 30 })
      ],
      range: Infinity,
      relativePoints: [ { x: 0, y: 0 } ]
    },
    inertia: true,
    restrict: {
      restriction: element.parentNode,
      elementRect: { top: 0, left: 0, bottom: 1, right: 1 },
      endOnly: true
    }
  })
  .on('dragmove', function (event) {
    x += event.dx;
    y += event.dy;

    event.target.style.webkitTransform =
    event.target.style.transform =
        'translate(' + x + 'px, ' + y + 'px)';
  });
<% end %>
        </div>

            <input id="demo-4-demo" type="radio" name="demo-4" hidden>
            <label class="demo-label" for="demo-4-demo"> Demo only </label>
    </div>

    <h1 id="resizing">Resizing</h1>

    <div class="demo-area">
        <input id="demo-8-html" type="radio" name="demo-8" hidden>
        <label class="html-label" for="demo-8-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div class="resize-container">
  <div class="resize-drag">
     Resize from any edge or corner
  </div>
</div>
<% end %>
        </div>

            <input id="demo-8-css" type="radio" name="demo-8" hidden>
            <label class="css-label" for="demo-8-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
.resize-drag {
  background-color: #29e;
  color: white;
  font-size: 20px;
  font-family: sans-serif;
  border-radius: 8px;
  padding: 20px;
  margin: 30px 20px;

  width: 120px;

  /* This makes things *much* easier */
  box-sizing: border-box;
}

.resize-container {
  width: 100%;
  height: 240px;
}
<% end %>
        </div>

            <input id="demo-8-js" type="radio" name="demo-8" hidden checked>
            <label class="js-label" for="demo-8-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
interact('.resize-drag')
  .draggable({
    onmove: window.dragMoveListener
  })
  .resizable({
    preserveAspectRatio: true,
    edges: { left: true, right: true, bottom: true, top: true }
  })
  .on('resizemove', function (event) {
    var target = event.target,
        x = (parseFloat(target.getAttribute('data-x')) || 0),
        y = (parseFloat(target.getAttribute('data-y')) || 0);

    // update the element's style
    target.style.width  = event.rect.width + 'px';
    target.style.height = event.rect.height + 'px';

    // translate when resizing from top or left edges
    x += event.deltaRect.left;
    y += event.deltaRect.top;

    target.style.webkitTransform = target.style.transform =
        'translate(' + x + 'px,' + y + 'px)';

    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
    target.textContent = Math.round(event.rect.width) + '×' + Math.round(event.rect.height);
  });
<% end %>
        </div>

        <input id="demo-8-demo" type="radio" name="demo-8" hidden>
        <label class="demo-label" for="demo-8-demo"> Demo only </label>
    </div>

    <h1>Multi-touch Rotation</h1>

    <div class="demo-area">
        <input id="demo-3-html" type="radio" name="demo-3" hidden>
        <label class="html-label" for="demo-3-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div id="rotate-area">
  <div id="angle-info">0&deg;</div>
  <svg id="arrow" viewBox="0 0 100 100">
    <polygon
      points="50,0 75,25 62.5,25 62.5,100 37.5,100 37.5,25 25,25"
      fill="#29e" />
  </svg>
</div>
<% end %>
        </div>

            <input id="demo-3-css" type="radio" name="demo-3" hidden>
            <label class="css-label" for="demo-3-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#rotate-area {
  overflow: hidden;
}

#arrow {
  width: 100%;
  height: 100%;
}

#angle-info {
  color: #666;
  font-size: 2em;
  position: absolute;
}
<% end %>
        </div>

            <input id="demo-3-js" type="radio" name="demo-3" hidden checked>
            <label class="js-label" for="demo-3-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
var angle = 0;

interact('#rotate-area').gesturable({
  onmove: function (event) {
    var arrow = document.getElementById('arrow');

    angle += event.da;

    arrow.style.webkitTransform =
    arrow.style.transform =
      'rotate(' + angle + 'deg)';

    document.getElementById('angle-info').textContent =
      angle.toFixed(2) + '°';
  }
});

<% end %>
        </div>

        <input id="demo-3-demo" type="radio" name="demo-3" hidden>
        <label class="demo-label" for="demo-3-demo"> Demo only </label>
    </div>

    <h1 id="pinch-zoom">Pinch-to-zoom</h1>

    <div class="demo-area">

        <input id="demo-1-html" type="radio" name="demo-1" hidden>
        <label class="html-label" for="demo-1-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div id="gesture-area">
  <%= image_tag 'ijs-256.png',
    :id => 'scale-element' %>
</div>
<% end %>
        </div>

        <input id="demo-1-css" type="radio" name="demo-1" hidden>
        <label class="css-label" for="demo-1-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#scale-element {
  display: block;
  max-width: 100%;
  margin: auto;
}

#scale-element.reset {
  transition: -webkit-transform 0.3s ease-in-out;
  transition: transform 0.3s ease-in-out;
}
<% end %>
        </div>

        <input id="demo-1-js" type="radio" name="demo-1" hidden checked>
        <label class="js-label" for="demo-1-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
var scale = 1,
    gestureArea = document.getElementById('gesture-area'),
    scaleElement = document.getElementById('scale-element'),
    resetTimeout;

interact(gestureArea)
  .gesturable({
    onstart: function (event) {
      clearTimeout(resetTimeout);
      scaleElement.classList.remove('reset');
    },
    onmove: function (event) {
      scale = scale * (1 + event.ds);

      scaleElement.style.webkitTransform =
      scaleElement.style.transform =
        'scale(' + scale + ')';

      dragMoveListener(event);
    },
    onend: function (event) {
      resetTimeout = setTimeout(reset, 1000);
      scaleElement.classList.add('reset');
    }
  })
  .draggable({ onmove: dragMoveListener });

function reset () {
  scale = 1;
  scaleElement.style.webkitTransform =
  scaleElement.style.transform =
    'scale(1)';
}

// prevent browser's native drag on the image
gestureArea.addEventListener('dragstart', function (event) {
    event.preventDefault();
})
<% end %>
        </div>

        <input id="demo-1-demo" type="radio" name="demo-1" hidden>
        <label class="demo-label" for="demo-1-demo"> Demo only </label>
    </div>

    <h1>Use in SVG files</h1>

    <div class="demo-area">
        <input id="demo-6-html" type="radio" name="demo-6" hidden checked>
        <label class="html-label" for="demo-6-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<object id="star-demo" type="image/svg+xml" data="/images/star.svg"></object>

<p>
  interact.js is referenced within the <a href="repo/demo/star.svg">star.svg</a>
  file as well as
  <a href="https://github.com/taye/interact.js/tree/master/demo/js/star.js">
  another script</a> to bind and handle drag event listeners
</p>

<% end %>
        </div>

            <input id="demo-6-css" type="radio" name="demo-6" hidden>
            <label class="css-label" for="demo-6-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
#star-demo {
  display: block;
  margin: auto;
}
<% end %>
        </div>

        <input id="demo-6-demo" type="radio" name="demo-6" hidden>
        <label class="demo-label" for="demo-6-demo"> Demo only </label>
    </div>

    <h1 id="tap-doubletap">Tap, doubletap and hold</h1>

    <div class="demo-area">
        <input id="demo-7-html" type="radio" name="demo-7" hidden checked>
        <label class="html-label" for="demo-7-html"> HTML </label>
        <div class="html-code">
<% code 'html' do %>
<!-- enable javascript to view a demo -->
<div class="tap-target">
  <p>Tap to change color</p>
  <p>Doubletap to change size</p>
  <p>Hold to rotate</p>
</div>
<% end %>
        </div>

            <input id="demo-7-css" type="radio" name="demo-7" hidden>
            <label class="css-label" for="demo-7-css"> CSS </label>
        <div class="css-code">
<% code 'css' do %>
/* enable javascript to view a demo */
.tap-target {
  width: 50%;
  height: 100%;
  padding: 10%;
  margin: 10% auto;

  border-radius: 100%;

  font-size: 1.125em;
  text-align: center;
  color: #fff;
  background-color: #29e;

  cursor: pointer;

  transition: all 0.3s;
}

.tap-target.switch-bg {
  background-color: #f40;
}

.tap-target.large {
  -webkit-transform: scale(1.25);
  transform: scale(1.25);
}

.rotate {
  -webkit-transform: rotate(180deg);
  transform: rotate(180deg);
}

<% end %>
        </div>

        <input id="demo-7-js" type="radio" name="demo-7" hidden checked>
        <label class="js-label" for="demo-7-js"> JS </label>
        <div class="js-code">
<% code 'javascript' do %>
/* enable javascript to view a demo */
interact('.tap-target')
  .on('tap', function (event) {
    event.currentTarget.classList.toggle('switch-bg');
    event.preventDefault();
  })
  .on('doubletap', function (event) {
    event.currentTarget.classList.toggle('large');
    event.currentTarget.classList.remove('rotate');
    event.preventDefault();
  })
  .on('hold', function (event) {
    event.currentTarget.classList.toggle('rotate');
    event.currentTarget.classList.remove('large');
  });
<% end %>
        </div>

        <input id="demo-7-demo" type="radio" name="demo-7" hidden>
        <label class="demo-label" for="demo-7-demo"> Demo only </label>
    </div>
</div>

<script>
    var lds = window.liveDemoSettings;

    _.extend(window.liveDemoSettings, {
        codeElementDepth: 3,
        insertPosition  : 'beforeend',

        HTMLSelector : lds.HTMLSelector + ', .highlight.html code',
        CSSSelector  : lds.CSSSelector + ', .highlight.css code',
        JSSelector   : lds.JSSelector + ', .highlight.javascript code',
    });

    interact('.demo-area .js-label, .demo-area .html-label, .demo-area .css-label, .demo-area .demo-label')
        .on('tap', showTab);

    // Hide demo code if the screen is initially narrow
    if (window.innerWidth <= 570) {
        _.each(document.querySelectorAll('.demo-area .demo-label'), function (label) {
            showTab({ currentTarget: label });

            label.previousElementSibling.checked = true;
        });
    }

    function showTab (event) {
        var label = event.currentTarget,
            demoArea = label.parentNode,
            codeBlocks = demoArea.querySelectorAll('.js-code, .html-code, .css-code'),
            liveDemo = label.nextElementSibling;

        _.each(codeBlocks, function (block) {
            block.style.display = 'none';
        });

        if (liveDemo) {
            liveDemo.style.display = '';
        }
    }
</script>
