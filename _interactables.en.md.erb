Interactables
=============

```javascript
interact('.drag-and-resize')
  .draggable({
    snap: {
      targets: [
        { x: 100, y: 200 },
        function (x, y) { return { x: x % 20, y: y }; }
    ]}
  })
  .resizable({
    inertia: true
  });
```

The `interact` function takes an Element or CSS selector and an optional
`options` object.  This returns an `Interactable` object which has several
methods and properties to configure what events it can fire and to modify the
reported coordinates. These methods have a fluent interface so method calls can
be chained nicely.

Selector Contexts
-----------------

```html
<ul id="my-list">
  <li> item 1 </li>
  <li> item 2 </li>
  <li> item 3 </li>
</ul>
```

```javascript
var myList = document.querySelector('#my-list');

interact('li', {
    context: myList
  })
  .draggable({ /* ... */ });
```

If you want to use a selector to target elements but only want to target the
children of a certain element, add a `context` element to the `options` object
when creating the `Interactable`.

```javascript
interact('li') === interact('li', { context: document })  // true
interact('li') === interact('li', { context: myList })    // false
```

`interact` returns a different object if the same selector is used but a
different context is specified. The default context is the `document`.

Drag, resize and Gesture handles
--------------------------------

```html
<div id="movable-box">
  <div id="drag-point" />
</div>
```

```javascript
var movable = document.querySelector('#movable-box');

interact(movable)
  .draggable({
    allowFrom: '.drag-handle',
    onmove: function (event) {
      /* ... */
    }
  })
  .resizable({
    allowFrom: '.resize-handle',
    onmove: function (event) {
      /* ... */
    }
  })
  .pointerEvents({
    allowFrom: '*',
  });;
```

The `allowFrom` option lets you specify a target CSS selecctor or Element which
must be the target of the pointer down event in order for the action to start.
This option available for drag, resize and gesture, as well as
[`pointerEvents`](#pointer-events) (down, move, hold, etc.). Using the
`allowFrom` option, you may specify handles for each action separately and for
all your pointerEvents listeners.

Ignorable Selectors
-------------------

```html
<div id="movable-box">
  <div id="undraggable-when-on-this-element" />
</div>
```

```javascript
var movable = document.querySelector('#movable-box');

interact(movable)
  .draggable({
    ignoreFrom: '.content',
    onmove: function (event) {
      /* ... */
    }
  })
  .pointerEvents({
    ignoreFrom: '[no-pointer-event]',
  });
```

Like `allowFrom`, `ignoreFrom` gives you the ability to avoid certain
elements in your interactable element. Which is good when certain
elements need to maintain default behavior when interacted with.

For example, dragging around a text/contentEditable, by wrapping this
object with a draggable element and ignoring the editable content you
maintain the ability to highlight text without moving the element.
