Interactables
=============

```javascript
interact('.drag-and-resize')
  .draggable({
    snap: {
      targets: [
        { x: 100, y: 200 },
        function (x, y) { return { x: x % 20, y: y }; }
    ]}
  })
  .resizable({
    inertia: true
  });
```

The `interact` function takes an Element or CSS selector and an optional
`options` object.  This returns an `Interactable` object which has several
methods and properties to configure what events it can fire and to modify the
reported coordinates. These methods have a fluent interface so method calls can
be chained nicely.

Selector Contexts
-----------------

```html
<ul id="my-list">
  <li> item 1 </li>
  <li> item 2 </li>
  <li> item 3 </li>
</ul>
```

```javascript
var myList = document.querySelector('#my-list');

interact('li', {
    context: myList
  })
  .draggable({ /* ... */ });
```

If you want to use a selector to target elements but only want to target the
children of a certain element, add a `context` element to the `options` object
when creating the `Interactable`.

```javascript
interact('li') === interact('li', { context: document })  // true
interact('li') === interact('li', { context: myList })    // false
```

`interact` returns a different object if the same selector is used but a
different context is specified. The default context is the `document`.

Allowable Selectors
-------------------

```html
<div id="movable-box">
  <div id="drag-point" />
</div>
```

```javascript
var movable = document.querySelector('#movable-box');

interact(movable, {
    allowFrom: '#drag-point',
  })
  .draggable({ /* ... */ });
```

To interact with elements only by elements within the interactable
object you can use `allowFrom`. Using this will limit the scope of
what is interactable in case you do not want to interact with the
whole element and its children.

Ignorable Selectors
-------------------

```html
<div id="movable-box">
  <div id="undraggable-when-on-this-element" />
</div>
```

```javascript
var movable = document.querySelector('#movable-box');

interact(movable, {
    ignoreFrom: '#undraggable-when-on-this-element',
  })
  .draggable({ /* ... */ });
```

Like `allowFrom`, `ignoreFrom` gives you the ability to avoid certain
elements in your interactable element. Which is good when certain
elements need to maintain default behavior when interacted with.

For example, dragging around a text/contentEditable, by wrapping this
object with a draggable element and ignoring the editable content you
maintain the ability to highlight text without moving the element.
